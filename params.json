{"name":"Peer-server","tagline":"","body":"## PeerServer: A Server in the Browser with WebRTC\r\n\r\nSophia Westwood and Brie Bunge\r\n\r\n(sophia@cs.stanford.edu, @sophiawestwood) (brie@cs.stanford.edu)\r\n\r\n### About\r\nPeerServer is a peer-to-peer client server using WebRTC, where your browser acts as a server for other browsers across WebRTC peer-to-peer data channels. You can create a client-server within your browser tab, upload content, and generate dynamic content using a mock-database, templating system, and sessions. Any client browser that connects to your client server will behave as if it is talking to a traditional server while in fact exclusively hitting your server.\r\n\r\nThis system allows you to quickly create a decentralized, short-lived web application where all the content lives within your browser. The traditional server only performs the initial handshake between the client-browsers and the client-server; your browser serves all other content peer-to-peer.\r\n\r\nWe built PeerServer in 8 weeks for our Stanford senior project in Spring 2013.\r\n\r\nCheck it out and create a server! Visit [peer-server.com](http://www.peer-server.com) or follow instructions to run locally.\r\n\r\n### Running the project locally\r\nAfter running git clone:\r\nFrom the `scripts` directory, run `coffee.sh` to compile the Coffeescript files and `handlebars.sh` to compile the Handlebars files.\r\n\r\nThen, run  `server.sh` to start the server.\r\n\r\nYou should now be able to access `http://localhost:8890` successfully!\r\n\r\n","google":"UA-42333100-1","note":"Don't delete this file! It's used internally to help with page regeneration."}