// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ClientBrowser = (function() {

    function ClientBrowser(documentElement) {
      var startPage, _ref,
        _this = this;
      this.documentElement = documentElement;
      this.executeScriptsCallback = __bind(this.executeScriptsCallback, this);

      this.setDocumentElementInnerHTML = __bind(this.setDocumentElementInnerHTML, this);

      this.setUpReceiveEventCallbacks = __bind(this.setUpReceiveEventCallbacks, this);

      this.channelOnMessage = __bind(this.channelOnMessage, this);

      this.channelOnOpen = __bind(this.channelOnOpen, this);

      this.sendEvent = __bind(this.sendEvent, this);

      this.parseUrl = __bind(this.parseUrl, this);

      this.getID = __bind(this.getID, this);

      _ref = this.parseUrl(window.location.pathname), this.desiredServer = _ref[0], startPage = _ref[1];
      this.pathRoot = "/connect/" + this.desiredServer + "/";
      this.eventTransmitter = new EventTransmitter();
      this.dataChannel = new ClientBrowserDataChannel(this.channelOnOpen, this.channelOnMessage, this.desiredServer);
      this.htmlProcessor = new HTMLProcessor(this.sendEvent, this.setDocumentElementInnerHTML, this.getID);
      this.setUpReceiveEventCallbacks(startPage);
      window.onpopstate = function(evt) {
        var filename;
        filename = evt.state.path;
        return _this.htmlProcessor.requestFile(filename, "backbutton");
      };
    }

    ClientBrowser.prototype.getID = function() {
      return this.dataChannel.id;
    };

    ClientBrowser.prototype.parseUrl = function(pathname) {
      var serverId, slashIndex, startPage, suffix;
      if (pathname.indexOf("connect") === -1) {
        console.error("Error: pathname does not contain 'connect'");
      }
      suffix = pathname.substr("/connect/".length);
      slashIndex = suffix.indexOf("/");
      startPage = null;
      if (slashIndex !== -1) {
        serverId = suffix.substr(0, slashIndex);
        if (slashIndex !== (suffix.length - 1)) {
          startPage = suffix.substr(suffix.indexOf("/") + 1);
        }
      } else {
        serverId = suffix;
      }
      return [serverId, startPage];
    };

    ClientBrowser.prototype.sendEvent = function(eventName, data) {
      return this.eventTransmitter.sendEvent(this.dataChannel, eventName, data);
    };

    ClientBrowser.prototype.channelOnOpen = function() {
      return console.log("channelOnOpen");
    };

    ClientBrowser.prototype.channelOnMessage = function(message) {
      console.log("channelOnMessage", message);
      return this.eventTransmitter.receiveEvent(message);
    };

    ClientBrowser.prototype.setUpReceiveEventCallbacks = function(startPage) {
      var _this = this;
      this.eventTransmitter.addEventCallback("initialLoad", function(data) {
        if (startPage) {
          startPage = _this.htmlProcessor.removeTrailingSlash(startPage);
          return _this.htmlProcessor.requestFile(startPage, "initialLoad");
        } else {
          console.log("no start", data);
          return _this.setDocumentElementInnerHTML(data, "initialLoadDefault");
        }
      });
      return this.eventTransmitter.addEventCallback("receiveFile", this.htmlProcessor.receiveFile);
    };

    ClientBrowser.prototype.setDocumentElementInnerHTML = function(data, optionalInfo) {
      var fullPath, html, path,
        _this = this;
      html = data.fileContents;
      path = this.htmlProcessor.removeTrailingSlash(data.filename);
      console.log(path);
      if (optionalInfo !== "backbutton" && optionalInfo !== "initialLoad") {
        fullPath = this.pathRoot + path;
        window.history.pushState({
          "path": path
        }, fullPath, fullPath);
        console.log(window.history.state);
      }
      this.documentElement.innerHTML = "";
      return this.htmlProcessor.processHTML(html, function(processedHTML, scriptMapping) {
        _this.documentElement.innerHTML = processedHTML;
        return _this.executeScriptsCallback(scriptMapping);
      });
    };

    ClientBrowser.prototype.executeScriptsCallback = function(scriptMapping) {
      var filename, newScriptEl, oldScriptEl, scriptElements, _i, _len, _results;
      scriptElements = this.documentElement.getElementsByTagName("script");
      _results = [];
      for (_i = 0, _len = scriptElements.length; _i < _len; _i++) {
        oldScriptEl = scriptElements[_i];
        newScriptEl = document.createElement("script");
        newScriptEl.type = "text/javascript";
        filename = oldScriptEl.text || oldScriptEl.textContent || oldScriptEl.innerHTML || "";
        if (!scriptMapping[filename]) {
          console.error("BAD: " + filename + "was not found in the script mapping. Script will not exist. This is because the script name got encoding-bork.");
        }
        newScriptEl.text = scriptMapping[filename];
        oldScriptEl.parentNode.insertBefore(newScriptEl, oldScriptEl);
        _results.push(oldScriptEl.parentNode.removeChild(oldScriptEl));
      }
      return _results;
    };

    return ClientBrowser;

  })();

}).call(this);
