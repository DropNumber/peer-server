// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ClientBrowser = (function() {
    function ClientBrowser(documentElement) {
      var startPage, _ref,
        _this = this;

      this.documentElement = documentElement;
      this.executeScriptsCallback = __bind(this.executeScriptsCallback, this);
      this.handleFormSubmit = __bind(this.handleFormSubmit, this);
      this.overrideFormsForClient = __bind(this.overrideFormsForClient, this);
      this.overrideAjaxForClient = __bind(this.overrideAjaxForClient, this);
      this.setDocumentElementInnerHTML = __bind(this.setDocumentElementInnerHTML, this);
      this.receiveFileDispatch = __bind(this.receiveFileDispatch, this);
      this.setUpReceiveEventCallbacks = __bind(this.setUpReceiveEventCallbacks, this);
      this.channelOnMessage = __bind(this.channelOnMessage, this);
      this.sendEvent = __bind(this.sendEvent, this);
      this.parseUrl = __bind(this.parseUrl, this);
      this.getID = __bind(this.getID, this);
      _ref = this.parseUrl(window.location), this.desiredServer = _ref[0], startPage = _ref[1];
      this.pathRoot = "/connect/" + this.desiredServer + "/";
      this.eventTransmitter = new EventTransmitter();
      this.dataChannel = new ClientBrowserDataChannel(this.channelOnMessage, this.desiredServer);
      this.htmlProcessor = new HTMLProcessor(this.sendEvent, this.setDocumentElementInnerHTML, this.getID);
      this.ajaxClient = new AjaxClient(this.sendEvent, this.getID);
      this.setUpReceiveEventCallbacks(startPage);
      window.onpopstate = function(evt) {
        var filename;

        filename = evt.state.path;
        return _this.htmlProcessor.requestFile(filename, "backbutton");
      };
    }

    ClientBrowser.prototype.getID = function() {
      return this.dataChannel.id;
    };

    ClientBrowser.prototype.parseUrl = function(locationObj) {
      var pathname, queryStr, result, serverId, slashIndex, startPage, suffix;

      pathname = locationObj.pathname;
      queryStr = locationObj.search;
      if (pathname.indexOf("connect") === -1) {
        console.error("Error: pathname does not contain 'connect'");
      }
      suffix = pathname.substr("/connect/".length);
      slashIndex = suffix.indexOf("/");
      startPage = null;
      if (slashIndex !== -1) {
        serverId = suffix.substr(0, slashIndex);
        if (slashIndex !== (suffix.length - 1)) {
          startPage = suffix.substr(suffix.indexOf("/") + 1);
        }
      } else {
        serverId = suffix;
      }
      result = startPage;
      if (queryStr) {
        result += queryStr;
      }
      result = startPage + queryStr;
      if (!result || result === "null") {
        result = "";
      }
      return [serverId, result];
    };

    ClientBrowser.prototype.sendEvent = function(eventName, data) {
      return this.eventTransmitter.sendEvent(this.dataChannel, eventName, data);
    };

    ClientBrowser.prototype.channelOnMessage = function(message) {
      return this.eventTransmitter.receiveEvent(message);
    };

    ClientBrowser.prototype.setUpReceiveEventCallbacks = function(startPage) {
      var _this = this;

      this.eventTransmitter.addEventCallback("initialLoad", function(data) {
        if (startPage) {
          startPage = _this.htmlProcessor.removeTrailingSlash(startPage);
          return _this.htmlProcessor.requestFile(startPage, "initialLoad");
        } else {
          return _this.setDocumentElementInnerHTML(data, "initialLoadDefault");
        }
      });
      return this.eventTransmitter.addEventCallback("receiveFile", this.receiveFileDispatch);
    };

    ClientBrowser.prototype.receiveFileDispatch = function(data) {
      if (data.type === "ajax") {
        return this.ajaxClient.receiveAjax(data);
      } else {
        return this.htmlProcessor.receiveFile(data);
      }
    };

    ClientBrowser.prototype.setDocumentElementInnerHTML = function(data, optionalInfo) {
      var fullPath, html, path,
        _this = this;

      html = data.fileContents;
      path = this.htmlProcessor.removeTrailingSlash(data.filename);
      if (optionalInfo !== "backbutton" && optionalInfo !== "initialLoad") {
        fullPath = this.pathRoot + path;
        window.history.pushState({
          "path": path
        }, fullPath, fullPath);
      }
      this.documentElement.innerHTML = "";
      if (data.fileType === "IMG") {
        return this.htmlProcessor.processImageAsHTML(html, function(processedHTML) {
          return _this.documentElement.innerHTML = processedHTML;
        });
      } else {
        return this.htmlProcessor.processHTML(html, function(processedHTML, scriptMapping) {
          _this.documentElement.innerHTML = processedHTML;
          _this.executeScriptsCallback(scriptMapping);
          _this.overrideAjaxForClient();
          return _this.overrideFormsForClient();
        });
      }
    };

    ClientBrowser.prototype.overrideAjaxForClient = function() {
      if ((document.getElementById("container").contentWindow.window.jQuery)) {
        return document.getElementById("container").contentWindow.window.jQuery.ajax = function(url, options) {
          return window.clientBrowser.ajaxClient.requestAjax(url, options, options.success, options.error);
        };
      }
    };

    ClientBrowser.prototype.overrideFormsForClient = function() {
      var forms,
        _this = this;

      forms = $(document.getElementById("container").contentWindow.document.forms);
      return forms.submit(function(evt) {
        var form, path;

        form = $(evt.target);
        path = form.attr("action");
        if (!path) {
          return true;
        }
        evt.preventDefault();
        _this.handleFormSubmit(form, path);
        return false;
      });
    };

    ClientBrowser.prototype.handleFormSubmit = function(form, path) {
      var data, input, properties, _i, _len, _ref;

      properties = {};
      _ref = form.find(":input");
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        input = $(input);
        if ($(input).attr("name")) {
          properties[$(input).attr("name")] = input.val();
        }
      }
      data = {
        "filename": path,
        "socketId": this.getID(),
        "options": {
          "data": properties
        },
        "type": "submit"
      };
      return this.sendEvent("requestFile", data);
    };

    ClientBrowser.prototype.executeScriptsCallback = function(scriptMapping) {
      var filename, newScriptEl, oldScriptEl, scriptElements, _i, _len, _results;

      scriptElements = this.documentElement.getElementsByTagName("script");
      _results = [];
      for (_i = 0, _len = scriptElements.length; _i < _len; _i++) {
        oldScriptEl = scriptElements[_i];
        newScriptEl = document.createElement("script");
        newScriptEl.type = "text/javascript";
        if ($(oldScriptEl).attr("todo-replace") === "replace") {
          filename = oldScriptEl.text || oldScriptEl.textContent || oldScriptEl.innerHTML || "";
          if (!scriptMapping[filename]) {
            console.error("BAD: " + filename + "was not found in the script mapping. Script will not exist. This is because the script name got encoding-bork.");
          }
          newScriptEl.text = scriptMapping[filename];
        } else {
          newScriptEl.text = oldScriptEl.text || oldScriptEl.textContent || oldScriptEl.innerHTML || "";
        }
        oldScriptEl.parentNode.insertBefore(newScriptEl, oldScriptEl);
        _results.push(oldScriptEl.parentNode.removeChild(oldScriptEl));
      }
      return _results;
    };

    return ClientBrowser;

  })();

}).call(this);
