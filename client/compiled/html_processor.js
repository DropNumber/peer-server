// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  window.HTMLProcessor = (function() {

    function HTMLProcessor(sendEvent, setDocumentElementInnerHTML, socketIdFcn) {
      var _this = this;
      this.sendEvent = sendEvent;
      this.setDocumentElementInnerHTML = setDocumentElementInnerHTML;
      this.socketIdFcn = socketIdFcn;
      this.checkForProcessCompletion = function() {
        return HTMLProcessor.prototype.checkForProcessCompletion.apply(_this, arguments);
      };
      this.receiveFile = function(data) {
        return HTMLProcessor.prototype.receiveFile.apply(_this, arguments);
      };
      this.removeTrailingSlash = function(str) {
        return HTMLProcessor.prototype.removeTrailingSlash.apply(_this, arguments);
      };
      this.requestFile = function(filename, type) {
        return HTMLProcessor.prototype.requestFile.apply(_this, arguments);
      };
      this.isInternalFile = function(filename) {
        return HTMLProcessor.prototype.isInternalFile.apply(_this, arguments);
      };
      this.processElementsWithAttribute = function(elSelector, attrSelector, type) {
        return HTMLProcessor.prototype.processElementsWithAttribute.apply(_this, arguments);
      };
      this.triggerOnParentString = function(eventName, href) {
        return HTMLProcessor.prototype.triggerOnParentString.apply(_this, arguments);
      };
      this.processLinks = function() {
        return HTMLProcessor.prototype.processLinks.apply(_this, arguments);
      };
      this.processStyleSheets = function() {
        return HTMLProcessor.prototype.processStyleSheets.apply(_this, arguments);
      };
      this.processScripts = function() {
        return HTMLProcessor.prototype.processScripts.apply(_this, arguments);
      };
      this.processImages = function() {
        return HTMLProcessor.prototype.processImages.apply(_this, arguments);
      };
      this.processHTML = function(html, completionCallback) {
        return HTMLProcessor.prototype.processHTML.apply(_this, arguments);
      };
      this.requestedFilenamesToElement = {};
      this.container = null;
      this.completionCallback = null;
    }

    HTMLProcessor.prototype.processHTML = function(html, completionCallback) {
      var container;
      this.completionCallback = completionCallback;
      this.scriptMapping = {};
      container = document.createElement("html");
      container.innerHTML = html.replace(/<\/?html>/g, "");
      this.container = $(container);
      this.processImages();
      this.processScripts();
      this.processStyleSheets();
      this.processLinks();
      return this.checkForProcessCompletion();
    };

    HTMLProcessor.prototype.processImages = function() {
      return this.processElementsWithAttribute("img[src]", "src", "image");
    };

    HTMLProcessor.prototype.processScripts = function() {
      return this.processElementsWithAttribute("script[src]", "src", "script");
    };

    HTMLProcessor.prototype.processStyleSheets = function() {
      this.processElementsWithAttribute("link[rel=\"stylesheet\"]", "href", "stylesheet");
      return this.processElementsWithAttribute("link[rel=\'stylesheet\']", "href", "stylesheet");
    };

    HTMLProcessor.prototype.processLinks = function() {
      var elements,
        _this = this;
      elements = this.container.find("a[href]");
      return elements.each(function(index, el) {
        var $el, href;
        $el = $(el);
        href = $el.attr("href");
        if (href[0] === "#") {

        } else if (_this.isInternalFile(href)) {
          return $el.attr("onclick", _this.triggerOnParentString("relativeLinkClicked", href));
        } else {
          return $el.attr("target", "_blank");
        }
      });
    };

    HTMLProcessor.prototype.triggerOnParentString = function(eventName, href) {
      return "javascript:top.$(top.document).trigger('" + eventName + "', ['" + href + "']);return false;";
    };

    HTMLProcessor.prototype.processElementsWithAttribute = function(elSelector, attrSelector, type) {
      var elements,
        _this = this;
      elements = this.container.find(elSelector);
      return elements.each(function(index, el) {
        var $el, filename;
        $el = $(el);
        filename = $el.attr(attrSelector);
        if (_this.isInternalFile(filename)) {
          _this.requestedFilenamesToElement[filename] = $el;
          return _this.requestFile(filename, type);
        }
      });
    };

    HTMLProcessor.prototype.isInternalFile = function(filename) {
      if (filename[0] !== "#" && (filename.indexOf(".") !== -1) && filename.match(/(?:https?:\/\/)|(?:data:)/) === null) {
        return true;
      }
      return false;
    };

    HTMLProcessor.prototype.requestFile = function(filename, type) {
      var data;
      console.log("sending socket id " + this.socketIdFcn());
      data = {
        "filename": filename,
        "socketId": this.socketIdFcn(),
        "type": type
      };
      return this.sendEvent("requestFile", data);
    };

    HTMLProcessor.prototype.removeTrailingSlash = function(str) {
      if (!str || str === "") {
        return str;
      }
      if (str.charAt(str.length - 1) === "/") {
        return str.substr(0, str.length - 1);
      }
      return str;
    };

    HTMLProcessor.prototype.receiveFile = function(data) {
      var $element, fileContents, filename, type;
      filename = this.removeTrailingSlash(data.filename);
      console.log("FILENAME: " + filename);
      fileContents = data.fileContents;
      type = data.type;
      if (type === "alink" || type === "backbutton" || type === "initialLoad") {
        this.setDocumentElementInnerHTML({
          "fileContents": data.fileContents,
          "filename": filename
        }, type);
      } else {
        $element = this.requestedFilenamesToElement[filename];
        if ($element) {
          if ($element.attr("src") && $element[0].tagName === "IMG") {
            $element.attr("src", fileContents);
          } else if ($element.attr("src") && $element[0].tagName === "SCRIPT") {
            $element.removeAttr("src");
            this.scriptMapping[data.filename] = fileContents;
            $element.append(data.filename);
          } else if ($element[0].tagName === "LINK") {
            $element.replaceWith("<style>" + fileContents + "</style>");
          }
          delete this.requestedFilenamesToElement[filename];
        }
      }
      return this.checkForProcessCompletion();
    };

    HTMLProcessor.prototype.checkForProcessCompletion = function() {
      if (Object.keys(this.requestedFilenamesToElement).length === 0 && this.completionCallback) {
        return this.completionCallback(this.container[0].outerHTML, this.scriptMapping);
      }
    };

    return HTMLProcessor;

  })();

}).call(this);
