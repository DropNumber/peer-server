// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RouteView = (function(_super) {
    __extends(RouteView, _super);

    function RouteView() {
      this.onDestroy = __bind(this.onDestroy, this);
      this.renderValidationResult = __bind(this.renderValidationResult, this);
      this.eventNameChange = __bind(this.eventNameChange, this);
      this.eventPathChange = __bind(this.eventPathChange, this);
      this.updateContents = __bind(this.updateContents, this);
      this.updateErrorMessage = __bind(this.updateErrorMessage, this);
      this.createEditor = __bind(this.createEditor, this);
      this.renderFunctionSignature = __bind(this.renderFunctionSignature, this);
      this.focus = __bind(this.focus, this);
      this.render = __bind(this.render, this);
      this.paramNamesToString = __bind(this.paramNamesToString, this);
      this.initProductionRouteEvents = __bind(this.initProductionRouteEvents, this);      _ref = RouteView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RouteView.prototype.initialize = function(options) {
      this.tmplRoute = Handlebars.templates["route"];
      this.tmplFunctionSignature = Handlebars.templates["route-function-signature"];
      this.model.on("change:paramNames", this.renderFunctionSignature);
      this.model.on("change", this.renderValidationResult);
      this.model.on("destroy", this.onDestroy);
      this.initProductionRouteEvents();
      return this.model.on("change:productionVersion", this.initProductionRouteEvents, this);
    };

    RouteView.prototype.events = {
      "keyup .path": "eventPathChange",
      "keyup .name": "eventNameChange",
      "remove": "onDestroy"
    };

    RouteView.prototype.initProductionRouteEvents = function() {
      this.productionRoute = this.model.get("productionVersion");
      if (this.productionRoute) {
        return this.productionRoute.on("change:errorMessage", this.updateErrorMessage);
      }
    };

    RouteView.prototype.paramNamesToString = function(paramNames) {
      if (paramNames.length === 0) {
        return "params";
      }
      return paramNames.join(", ") + ", params";
    };

    RouteView.prototype.render = function() {
      var $el;

      $el = $(this.el);
      $el.html(this.tmplRoute({
        name: this.model.get("name"),
        path: this.model.get("routePath"),
        functionParams: this.paramNamesToString([])
      }));
      this.updateErrorMessage();
      this.code = this.$(".code");
      this.path = this.$(".path");
      this.functionSignature = this.$(".function-signature");
      this.aceEditor = this.createEditor(this.code);
      this.aceEditor.getSession().setValue(this.model.get("routeCode"));
      this.aceEditor.on("change", this.updateContents);
      this.renderFunctionSignature();
      this.name.tipsy({
        fallback: "Invalid name",
        trigger: "manual"
      });
      this.path.tipsy({
        fallback: "Invalid route path",
        trigger: "manual"
      });
      return this;
    };

    RouteView.prototype.focus = function() {
      return this.name.focus();
    };

    RouteView.prototype.renderFunctionSignature = function() {
      this.functionSignature.html(this.tmplFunctionSignature({
        name: this.model.get("name"),
        parameterString: this.paramNamesToString(this.model.get("paramNames"))
      }));
      return this.name = this.$(".name");
    };

    RouteView.prototype.createEditor = function(elem) {
      var editor;

      editor = ace.edit(elem[0]);
      editor.setTheme("ace/theme/tomorrow_night_eighties");
      editor.setFontSize("12px");
      editor.getSession().setMode("ace/mode/javascript");
      return editor;
    };

    RouteView.prototype.updateErrorMessage = function() {
      var errorMessage, errorMessageContainer;

      errorMessageContainer = $(this.el).find(".error-message-container");
      if (this.productionRoute && this.productionRoute.get("errorMessage")) {
        errorMessage = errorMessageContainer.find(".error-message");
        errorMessage.html(this.productionRoute.get("errorMessage"));
        return errorMessageContainer.show();
      } else {
        return errorMessageContainer.hide();
      }
    };

    RouteView.prototype.updateContents = function() {
      return this.model.save("routeCode", this.aceEditor.getValue());
    };

    RouteView.prototype.eventPathChange = function(event) {
      var target;

      target = $(event.currentTarget);
      return this.model.save("routePath", target.val());
    };

    RouteView.prototype.eventNameChange = function(event) {
      var target;

      target = $(event.currentTarget);
      return this.model.save("name", target.val());
    };

    RouteView.prototype.renderValidationResult = function(model, error) {
      this.model.isValid();
      error = this.model.validationError;
      if (error && error.name) {
        this.name.tipsy("show");
      } else {
        this.name.tipsy("hide");
      }
      if (error && error.routePath) {
        return this.path.tipsy("show");
      } else {
        return this.path.tipsy("hide");
      }
    };

    RouteView.prototype.onDestroy = function() {
      this.aceEditor.destroy();
      $('.tipsy').remove();
      return this.model.off(null, null, this);
    };

    return RouteView;

  })(Backbone.View);

}).call(this);
