// Generated by CoffeeScript 1.6.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RouteView = (function(_super) {
    __extends(RouteView, _super);

    function RouteView() {
      this.replaceTooltipsy = __bind(this.replaceTooltipsy, this);
      this.onDestroy = __bind(this.onDestroy, this);
      this.renderValidationResult = __bind(this.renderValidationResult, this);
      this.eventNameChange = __bind(this.eventNameChange, this);
      this.eventPathChange = __bind(this.eventPathChange, this);
      this.updateContents = __bind(this.updateContents, this);
      this.updateErrorMessage = __bind(this.updateErrorMessage, this);
      this.createEditor = __bind(this.createEditor, this);
      this.renderFunctionSignature = __bind(this.renderFunctionSignature, this);
      this.focus = __bind(this.focus, this);
      this.render = __bind(this.render, this);
      this.paramNamesToString = __bind(this.paramNamesToString, this);
      this.initProductionRouteEvents = __bind(this.initProductionRouteEvents, this);
      _ref = RouteView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RouteView.prototype.initialize = function(options) {
      this.tmplRoute = Handlebars.templates["route"];
      this.tmplFunctionSignature = Handlebars.templates["route-function-signature"];
      this.model.on("change:paramNames", this.renderFunctionSignature);
      this.model.on("change", this.renderValidationResult);
      this.model.on("destroy", this.onDestroy);
      this.initProductionRouteEvents();
      return this.model.on("change:productionVersion", this.initProductionRouteEvents, this);
    };

    RouteView.prototype.events = {
      "keyup .path": "eventPathChange",
      "keyup .name": "eventNameChange",
      "remove": "onDestroy"
    };

    RouteView.nameErrorText = "Invalid name";

    RouteView.pathErrorText = "Invalid route path";

    RouteView.prototype.initProductionRouteEvents = function() {
      this.productionRoute = this.model.get("productionVersion");
      if (this.productionRoute) {
        return this.productionRoute.on("change:errorMessage", this.updateErrorMessage);
      }
    };

    RouteView.prototype.paramNamesToString = function(paramNames) {
      if (paramNames.length === 0) {
        return "params";
      }
      return paramNames.join(", ") + ", params";
    };

    RouteView.prototype.render = function() {
      var $el;
      $el = $(this.el);
      $el.html(this.tmplRoute({
        name: this.model.get("name"),
        path: this.model.get("routePath"),
        functionParams: this.paramNamesToString([])
      }));
      this.updateErrorMessage();
      this.code = this.$(".code");
      this.path = this.$(".path");
      this.functionSignature = this.$(".function-signature");
      this.aceEditor = this.createEditor(this.code);
      this.aceEditor.getSession().setValue(this.model.get("routeCode"));
      this.aceEditor.on("change", this.updateContents);
      this.renderFunctionSignature();
      this.replaceTooltipsy(null, this.name, RouteView.nameErrorText);
      this.replaceTooltipsy(null, this.path, RouteView.pathErrorText);
      return this;
    };

    RouteView.prototype.focus = function() {
      this.name.focus();
      return this.renderValidationResult();
    };

    RouteView.prototype.renderFunctionSignature = function() {
      var newName;
      this.functionSignature.html(this.tmplFunctionSignature({
        name: this.model.get("name"),
        parameterString: this.paramNamesToString(this.model.get("paramNames"))
      }));
      newName = this.$(".name");
      this.replaceTooltipsy(this.name, newName, RouteView.nameErrorText);
      return this.name = newName;
    };

    RouteView.prototype.createEditor = function(elem) {
      var editor;
      editor = ace.edit(elem[0]);
      editor.setTheme("ace/theme/tomorrow_night_eighties");
      editor.setFontSize("12px");
      editor.getSession().setMode("ace/mode/javascript");
      return editor;
    };

    RouteView.prototype.updateErrorMessage = function() {
      var displayWithClass, errorMessage, errorMessageContainer, message, startsWith,
        _this = this;
      startsWith = function(str, start) {
        return str.slice(0, start.length) === start;
      };
      displayWithClass = function(errorMessage, className) {
        return $(errorMessage).removeClass("alert-error").removeClass("alert-block").removeClass("alert-success").addClass(className);
      };
      errorMessageContainer = $(this.el).find(".error-message-container");
      if (this.productionRoute && this.productionRoute.get("errorMessage")) {
        errorMessage = errorMessageContainer.find(".error-message");
        message = this.productionRoute.get("errorMessage");
        errorMessage.html(message);
        if (startsWith(message, "Success: ")) {
          displayWithClass(errorMessageContainer, "alert-success");
        } else if (startsWith(message, "Note: ")) {
          displayWithClass(errorMessageContainer, "alert-block");
        } else {
          displayWithClass(errorMessageContainer, "alert-error");
        }
        return errorMessageContainer.show();
      } else {
        return errorMessageContainer.hide();
      }
    };

    RouteView.prototype.updateContents = function() {
      return this.model.save("routeCode", this.aceEditor.getValue());
    };

    RouteView.prototype.eventPathChange = function(event) {
      var target;
      target = $(event.currentTarget);
      this.model.save("routePath", target.val());
      return this.renderValidationResult();
    };

    RouteView.prototype.eventNameChange = function(event) {
      var target;
      target = $(event.currentTarget);
      this.model.save("name", target.val());
      return this.renderValidationResult();
    };

    RouteView.prototype.renderValidationResult = function(model, error) {
      this.model.isValid();
      error = this.model.validationError;
      if ($(this.name).data('tooltipsy')) {
        if (error && error.name) {
          $(this.name).data('tooltipsy').show();
        } else {
          $(this.name).data('tooltipsy').hide();
        }
      }
      if ($(this.path).data('tooltipsy')) {
        if (error && error.routePath) {
          return $(this.path).data('tooltipsy').show();
        } else {
          return $(this.path).data('tooltipsy').hide();
        }
      }
    };

    RouteView.prototype.onDestroy = function() {
      this.aceEditor.destroy();
      $(this.name).data('tooltipsy').destroy();
      $(this.path).data('tooltipsy').destroy();
      return this.model.off(null, null, this);
    };

    RouteView.prototype.replaceTooltipsy = function(oldTooltipsyEl, newTooltipsyEl, text) {
      if (oldTooltipsyEl) {
        $(oldTooltipsyEl).data('tooltipsy').destroy();
      }
      return $(newTooltipsyEl).tooltipsy({
        content: text,
        hideEvent: "",
        showEvent: "",
        offset: [0, 1]
      });
    };

    return RouteView;

  })(Backbone.View);

}).call(this);
