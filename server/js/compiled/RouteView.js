// Generated by CoffeeScript 1.6.2
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.RouteView = (function(_super) {
    __extends(RouteView, _super);

    function RouteView() {
      this.renderValidationResult = __bind(this.renderValidationResult, this);
      this.eventNameChange = __bind(this.eventNameChange, this);
      this.eventPathChange = __bind(this.eventPathChange, this);
      this.updateContents = __bind(this.updateContents, this);
      this.render = __bind(this.render, this);
      this.paramNamesToString = __bind(this.paramNamesToString, this);
      this.handleRoutePathChange = __bind(this.handleRoutePathChange, this);      _ref = RouteView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    RouteView.prototype.initialize = function(options) {
      var _this = this;

      this.tmplRoute = Handlebars.compile($("#route-template").html());
      this.model.on("change", this.renderValidationResult);
      this.model.on("change:name", function(route) {
        return $($(_this.el).find(".route-fcn-name")).html(route.get("name"));
      });
      return this.model.on("change:paramNames", this.handleRoutePathChange);
    };

    RouteView.prototype.events = {
      "keyup .path": "eventPathChange",
      "keyup .name": "eventNameChange"
    };

    RouteView.prototype.handleRoutePathChange = function(route) {
      return $($(this.el).find(".route-fcn-params")).html(this.paramNamesToString(route.get("paramNames")));
    };

    RouteView.prototype.paramNamesToString = function(paramNames) {
      if (paramNames.length === 0) {
        return "params";
      }
      return paramNames.join(", ") + ", params";
    };

    RouteView.prototype.render = function() {
      var $el;

      $el = $(this.el);
      $el.html(this.tmplRoute({
        name: this.model.get("name"),
        path: this.model.get("routePath"),
        functionParams: this.paramNamesToString([])
      }));
      this.code = this.$(".code");
      this.name = this.$(".name");
      this.path = this.$(".path");
      this.code.text(this.model.get("routeCode"));
      this.aceEditor = ace.edit(this.code[0]);
      this.aceEditor.setTheme("ace/theme/tomorrow_night_eighties");
      this.aceEditor.setFontSize("12px");
      this.aceEditor.getSession().setMode("ace/mode/javascript");
      this.aceEditor.on("change", this.updateContents);
      this.name.tipsy({
        fallback: "Invalid name",
        trigger: "manual"
      });
      this.path.tipsy({
        fallback: "Invalid route path",
        trigger: "manual"
      });
      return this;
    };

    RouteView.prototype.updateContents = function() {
      return this.model.save("routeCode", this.aceEditor.getValue());
    };

    RouteView.prototype.eventPathChange = function(event) {
      var target;

      target = $(event.currentTarget);
      return this.model.save("routePath", target.val());
    };

    RouteView.prototype.eventNameChange = function(event) {
      var target;

      target = $(event.currentTarget);
      return this.model.save("name", target.val());
    };

    RouteView.prototype.renderValidationResult = function(model, error) {
      this.model.isValid();
      error = this.model.validationError;
      if (error && error.name) {
        this.name.tipsy("show");
      } else {
        this.name.tipsy("hide");
      }
      if (error && error.routePath) {
        return this.path.tipsy("show");
      } else {
        return this.path.tipsy("hide");
      }
    };

    return RouteView;

  })(Backbone.View);

}).call(this);

/*
//@ sourceMappingURL=RouteView.map
*/
