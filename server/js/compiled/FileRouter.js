// Generated by CoffeeScript 1.6.1
(function() {
  'Defines the Route model and RouteCollection for handing dynamic paths and \ndefined path parameters.\n\nTODO: there should be verification on the UI-end that only valid Routes are initialized.\nSpecifically: \n  - name should be a valid Javascript function name (nonempty, no invalid characters, no spaces, etc)\n  - routePath should be a valid path (tokens separated by / without invalid characters in the tokens.\n      some of the tokens can be of the form <token> but there shouldn\'t be any other angle-brackets \n      except at the start and end.)';
  var _this = this,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Route = (function(_super) {

    __extends(Route, _super);

    function Route() {
      var _this = this;
      this.sanitizePathPart = function(part) {
        return Route.prototype.sanitizePathPart.apply(_this, arguments);
      };
      this.setParsedPath = function() {
        return Route.prototype.setParsedPath.apply(_this, arguments);
      };
      this.getExecutableFunction = function(urlParams, dynamicParams, staticFiles) {
        return Route.prototype.getExecutableFunction.apply(_this, arguments);
      };
      return Route.__super__.constructor.apply(this, arguments);
    }

    Route.prototype.defaults = {
      name: "",
      routePath: "",
      routeCode: "",
      paramNames: [],
      options: {},
      isProductionVersion: false,
      hasBeenEdited: false
    };

    Route.prototype.initialize = function() {
      this.setParsedPath();
      console.log("Parsed route: " + this.get("routePath") + " " + this.pathRegex + " " + this.paramNames);
      return this.on("change:routePath", this.setParsedPath);
    };

    Route.prototype.getExecutableFunction = function(urlParams, dynamicParams, staticFiles) {
      var fcn, paramNames, text,
        _this = this;
      text = "(function " + this.get("name") + "(";
      paramNames = this.get("paramNames");
      text += paramNames.join(", ") + ", params" + ") {";
      text += this.get("routeCode") + "})";
      dynamicParams = _.map(dynamicParams, function(param) {
        return '"' + param + '"';
      });
      console.log("dynamic params: " + dynamicParams);
      text += "(" + dynamicParams.join(",") + ", " + JSON.stringify(urlParams) + ")";
      console.log("Function: " + text);
      fcn = function() {
        staticFiles = staticFiles;
        return eval(text);
      };
      return fcn;
    };

    Route.prototype.setParsedPath = function() {
      var isParamPart, paramNames, part, path, pathParts, regexParts, _i, _len,
        _this = this;
      isParamPart = function(part) {
        return part.length > 2 && part.charAt(0) === "<" && part.charAt(part.length - 1) === ">";
      };
      path = this.get("routePath");
      pathParts = path.split("/");
      paramNames = [];
      regexParts = [];
      if (pathParts.length === 0) {
        return paramNames;
      }
      pathParts[pathParts.length - 1] = this.sanitizePathPart(_.last(pathParts));
      for (_i = 0, _len = pathParts.length; _i < _len; _i++) {
        part = pathParts[_i];
        if (isParamPart(part)) {
          paramNames.push(part.slice(1, -1));
          regexParts.push("([^/]+)");
        } else {
          regexParts.push(part);
        }
      }
      this.pathRegex = "^" + regexParts.join("/") + "/?$";
      return this.set("paramNames", paramNames);
    };

    Route.prototype.sanitizePathPart = function(part) {
      part = part.split("#")[0];
      part = part.split("&")[0];
      return part;
    };

    return Route;

  })(Backbone.Model);

  window.RouteCollection = (function(_super) {

    __extends(RouteCollection, _super);

    function RouteCollection() {
      var _this = this;
      this.createProductionVersion = function() {
        return RouteCollection.prototype.createProductionVersion.apply(_this, arguments);
      };
      this.getRouteCode = function(routePath) {
        return RouteCollection.prototype.getRouteCode.apply(_this, arguments);
      };
      this.findRouteForPath = function(routePath) {
        return RouteCollection.prototype.findRouteForPath.apply(_this, arguments);
      };
      this.comparator = function(route) {
        return RouteCollection.prototype.comparator.apply(_this, arguments);
      };
      return RouteCollection.__super__.constructor.apply(this, arguments);
    }

    RouteCollection.prototype.model = Route;

    RouteCollection.prototype.localStorage = new Backbone.LocalStorage("RouteCollection");

    RouteCollection.prototype.initialize = function() {
      var indexRoute, indexRouteDev;
      indexRoute = new Route({
        name: "testing",
        routePath: "/test/<name>/<x>/<y>",
        routeCode: "var result = parseInt(x)+parseInt(y); return '<h1>hello ' + name + '!</h1><p> x= ' + x + ' plus y = ' + y + ' is ' + result + '</p><h2>' + params.animal + '!!</h2>'",
        isProductionVersion: true
      });
      this.add(indexRoute);
      indexRouteDev = new Route({
        name: "testing",
        routePath: "/test/<name>/<x>/<y>",
        routeCode: "var result = parseInt(x)+parseInt(y); return '<h1>hello ' + name + '!</h1><p> x= ' + x + ' plus y = ' + y + ' is ' + result + '</p><h2>' + params.animal + '!!</h2>'",
        isProductionVersion: false
      });
      this.add(indexRouteDev);
      return this.fetch();
    };

    RouteCollection.prototype.comparator = function(route) {
      return route.get("routePath");
    };

    RouteCollection.prototype.findRouteForPath = function(routePath) {
      var matchedRoute,
        _this = this;
      matchedRoute = this.find(function(route) {
        return route.get("isProductionVersion") && routePath.match(route.pathRegex) !== null;
      });
      return matchedRoute;
    };

    RouteCollection.prototype.getRouteCode = function(routePath) {
      return this.findWhere({
        routePath: routePath
      }).get("routeCode");
    };

    RouteCollection.prototype.createProductionVersion = function() {
      var developmentFiles, productionFiles,
        _this = this;
      productionFiles = this.where({
        isProductionVersion: true
      });
      _.each(productionFiles, function(route) {
        return route.destroy();
      });
      developmentFiles = this.where({
        isProductionVersion: false
      });
      return _.each(developmentFiles, function(route) {
        var attrs, copy;
        attrs = _.clone(route.attributes);
        attrs.id = null;
        copy = new Route(attrs);
        copy.set("isProductionVersion", true);
        _this.add(copy);
        return copy.save();
      });
    };

    return RouteCollection;

  })(Backbone.Collection);

}).call(this);
