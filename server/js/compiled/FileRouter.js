// Generated by CoffeeScript 1.6.2
(function() {
  var _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Route = (function(_super) {
    __extends(Route, _super);

    function Route() {
      _ref = Route.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Route.prototype.defaults = {
      name: "",
      routePath: "",
      routeCode: "",
      options: {},
      isProductionVersion: false,
      hasBeenEdited: false
    };

    Route.prototype.initialize = function() {};

    return Route;

  })(Backbone.Model);

  window.RouteCollection = (function(_super) {
    __extends(RouteCollection, _super);

    function RouteCollection() {
      this.createProductionVersion = __bind(this.createProductionVersion, this);
      this.getRouteCode = __bind(this.getRouteCode, this);
      this.hasRoute = __bind(this.hasRoute, this);
      this.comparator = __bind(this.comparator, this);      _ref1 = RouteCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    RouteCollection.prototype.model = Route;

    RouteCollection.prototype.localStorage = new Backbone.LocalStorage("RouteCollection");

    RouteCollection.prototype.initialize = function() {
      return this.fetch();
    };

    RouteCollection.prototype.comparator = function(route) {
      return route.get("routePath");
    };

    RouteCollection.prototype.hasRoute = function(routePath) {
      console.log("route path: " + routePath);
      return this.findWhere({
        routePath: routePath,
        isProductionVersion: true
      });
    };

    RouteCollection.prototype.getRouteCode = function(routePath) {
      return this.findWhere({
        routePath: routePath
      }).get("routeCode");
    };

    RouteCollection.prototype.createProductionVersion = function() {
      var developmentFiles, productionFiles,
        _this = this;

      productionFiles = this.where({
        isProductionVersion: true
      });
      _.each(productionFiles, function(route) {
        return route.destroy();
      });
      developmentFiles = this.where({
        isProductionVersion: false
      });
      return _.each(developmentFiles, function(route) {
        var attrs, copy;

        attrs = _.clone(route.attributes);
        attrs.id = null;
        copy = new Route(attrs);
        copy.set("isProductionVersion", true);
        _this.add(copy);
        return copy.save();
      });
    };

    return RouteCollection;

  })(Backbone.Collection);

}).call(this);

/*
//@ sourceMappingURL=FileRouter.map
*/
