// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ClientServerUnarchiver = (function() {
    function ClientServerUnarchiver(params) {
      this.alterContentsForImage = __bind(this.alterContentsForImage, this);
      this.addServerFile = __bind(this.addServerFile, this);
      this.addRoute = __bind(this.addRoute, this);
      this.processFile = __bind(this.processFile, this);
      this.clearAll = __bind(this.clearAll, this);
      var contents, database, developmentFiles, productionFiles, zip,
        _this = this;

      this.serverFileCollection = params.serverFileCollection;
      this.routeCollection = params.routeCollection;
      this.userDatabase = params.userDatabase;
      contents = params.contents;
      this.clearAll();
      zip = new JSZip(contents);
      console.log(zip);
      productionFiles = zip.filter(function(relativePath, file) {
        return /^live_version\/.+/.test(relativePath);
      });
      developmentFiles = zip.filter(function(relativePath, file) {
        return /^edited_version\/.+/.test(relativePath);
      });
      _.each(productionFiles, _.bind(this.processFile, this, true));
      _.each(developmentFiles, _.bind(this.processFile, this, false));
      database = zip.file("database.db");
      if (database) {
        this.userDatabase.fromJSONArray(database.data);
      }
    }

    ClientServerUnarchiver.prototype.clearAll = function() {
      var model;

      while (model = this.serverFileCollection.first()) {
        model.destroy();
      }
      while (model = this.routeCollection.first()) {
        model.destroy();
      }
      this.serverFileCollection.reset();
      this.routeCollection.reset();
      return this.userDatabase.clear();
    };

    ClientServerUnarchiver.prototype.processFile = function(isProductionVersion, file) {
      var contents, ext, fileType, isRoute, name;

      name = file.name.replace(/^(live|edited)_version\//, "");
      contents = file.data;
      isRoute = /.+\.route\.js$/.test(name);
      fileType = "";
      ext = name.match(/.*\.(.*?)$/);
      if (ext) {
        ext = ext[1];
        fileType = ServerFile.fileExtToFileType[ext] || "";
        if (ext === "jpg" || ext === "png" || ext === "jpeg") {
          contents = this.alterContentsForImage(ext, contents);
        }
      }
      if (isRoute) {
        return this.addRoute(name, contents, isProductionVersion);
      } else {
        return this.addServerFile(name, contents, fileType, isProductionVersion);
      }
    };

    ClientServerUnarchiver.prototype.addRoute = function(name, contents, isProductionVersion) {
      var route, routeCode, routePath;

      contents = JSON.parse(contents);
      name = name.replace(/\.route\.js$/, "");
      routePath = contents.routePath;
      routeCode = contents.routeCode;
      route = new Route({
        name: name,
        routePath: routePath,
        routeCode: routeCode,
        isProductionVersion: isProductionVersion
      });
      this.routeCollection.add(route);
      return route.save();
    };

    ClientServerUnarchiver.prototype.addServerFile = function(name, contents, fileType, isProductionVersion) {
      var serverFile;

      serverFile = new ServerFile({
        name: name,
        contents: contents,
        fileType: fileType,
        isProductionVersion: isProductionVersion
      });
      this.serverFileCollection.add(serverFile);
      return serverFile.save();
    };

    ClientServerUnarchiver.prototype.alterContentsForImage = function(ext, contents) {
      contents = btoa(contents);
      if (ext === "jpg" || ext === "jpeg") {
        return "data:image/jpeg;base64," + contents;
      }
      if (ext === "png") {
        return "data:image/png;base64," + contents;
      }
    };

    return ClientServerUnarchiver;

  })();

}).call(this);

/*
//@ sourceMappingURL=ClientServerUnarchiver.map
*/
