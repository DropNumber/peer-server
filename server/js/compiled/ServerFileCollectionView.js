// Generated by CoffeeScript 1.3.3
(function() {
  ' \nDisplay and organization of the user-uploaded file collection. \nEdit/Done modes for saving.';

  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.ServerFileCollectionView = (function(_super) {

    __extends(ServerFileCollectionView, _super);

    function ServerFileCollectionView() {
      this.eventChangeLandingPage = __bind(this.eventChangeLandingPage, this);

      this.handleFile = __bind(this.handleFile, this);

      this.eventDropFiles = __bind(this.eventDropFiles, this);

      this.switchToEditableMode = __bind(this.switchToEditableMode, this);

      this.switchToReadOnlyMode = __bind(this.switchToReadOnlyMode, this);

      this.preventDefault = __bind(this.preventDefault, this);

      this.eventSelectFile = __bind(this.eventSelectFile, this);

      this.addedServerFile = __bind(this.addedServerFile, this);

      this.addOne = __bind(this.addOne, this);

      this.addAll = __bind(this.addAll, this);

      this.render = __bind(this.render, this);

      this.toggleIsEditable = __bind(this.toggleIsEditable, this);
      return ServerFileCollectionView.__super__.constructor.apply(this, arguments);
    }

    ServerFileCollectionView.prototype.el = "#file-collection-view";

    ServerFileCollectionView.prototype.initialize = function(options) {
      this.isEditable = options.isEditable;
      this.previousServerFileView = null;
      this.render();
      this.collection.bind("add", this.addOne);
      this.collection.bind("reset", this.addAll);
      return this.collection.fetch();
    };

    ServerFileCollectionView.prototype.events = {
      "dragover .file-drop": "preventDefault",
      "drop .file-drop": "eventDropFiles",
      "click .file-list li[data-cid]": "eventSelectFile",
      "change .landing-page": "eventChangeLandingPage"
    };

    ServerFileCollectionView.prototype.toggleIsEditable = function() {
      this.isEditable = !this.isEditable;
      return this.render();
    };

    ServerFileCollectionView.prototype.render = function() {
      if (this.isEditable) {
        return this.switchToEditableMode();
      } else {
        return this.switchToReadOnlyMode();
      }
    };

    ServerFileCollectionView.prototype.addAll = function() {
      return this.collection.each(this.addOne);
    };

    ServerFileCollectionView.prototype.addOne = function(serverFile) {
      var headerToAppendAfter, listEl, nextHeader;
      if (serverFile.get("isProductionVersion")) {
        return;
      }
      listEl = $("<li data-cid='" + serverFile.cid + "'><a href='#'>" + (serverFile.get('name')) + "</a></li>");
      headerToAppendAfter = null;
      switch (serverFile.get("fileType")) {
        case ServerFile.prototype.fileTypeEnum.HTML:
          headerToAppendAfter = this.$(".nav-header.html");
          break;
        case ServerFile.prototype.fileTypeEnum.CSS:
          headerToAppendAfter = this.$(".nav-header.css");
          break;
        case ServerFile.prototype.fileTypeEnum.JS:
          headerToAppendAfter = this.$(".nav-header.js");
          break;
        case ServerFile.prototype.fileTypeEnum.IMG:
          headerToAppendAfter = this.$(".nav-header.img");
      }
      if (headerToAppendAfter) {
        nextHeader = headerToAppendAfter.nextAll(".nav-header").first();
      } else {
        nextHeader = null;
      }
      if (nextHeader && nextHeader.length > 0) {
        nextHeader.before(listEl);
      } else {
        this.$(".file-list").append(listEl);
      }
      return this.addedServerFile(serverFile);
    };

    ServerFileCollectionView.prototype.addedServerFile = function(serverFile) {
      var optionEl;
      if (serverFile.get("fileType") === ServerFile.prototype.fileTypeEnum.HTML) {
        optionEl = $("<option value='" + serverFile.cid + "'>" + (serverFile.get('name')) + "</option>");
        if (serverFile.get("isLandingPage")) {
          optionEl.attr("selected", "selected");
        }
        return this.$(".landing-page").append(optionEl);
      }
    };

    ServerFileCollectionView.prototype.eventSelectFile = function(event) {
      var cid, serverFile, serverFileView, target;
      target = $(event.currentTarget);
      this.$(".file-list li").removeClass("active");
      target.addClass("active");
      cid = target.attr("data-cid");
      serverFile = this.collection.get(cid);
      if (this.previousServerFileView) {
        this.previousServerFileView.remove();
      }
      serverFileView = new ServerFileView({
        model: serverFile,
        isEditable: this.isEditable
      });
      this.$("#file-view-container").append(serverFileView.render().el);
      this.previousServerFileView = serverFileView;
      return false;
    };

    ServerFileCollectionView.prototype.preventDefault = function(event) {
      return event.preventDefault();
    };

    ServerFileCollectionView.prototype.switchToReadOnlyMode = function() {
      this.$(".file-drop").hide();
      this.$(".landing-page").attr("disabled", "disabled");
      if (this.previousServerFileView) {
        return this.previousServerFileView.setIsEditable(false);
      }
    };

    ServerFileCollectionView.prototype.switchToEditableMode = function() {
      this.$(".file-drop").show();
      this.$(".landing-page").removeAttr("disabled");
      if (this.previousServerFileView) {
        return this.previousServerFileView.setIsEditable(true);
      }
    };

    ServerFileCollectionView.prototype.eventDropFiles = function(event) {
      var droppedFiles, file, _i, _len;
      if (!this.isEditable) {
        return;
      }
      event.preventDefault();
      droppedFiles = event.originalEvent.dataTransfer.files;
      for (_i = 0, _len = droppedFiles.length; _i < _len; _i++) {
        file = droppedFiles[_i];
        this.handleFile(file);
      }
      return false;
    };

    ServerFileCollectionView.prototype.handleFile = function(file) {
      var fileType, reader,
        _this = this;
      reader = new FileReader();
      fileType = ServerFile.prototype.rawTypeToFileType(file.type);
      if (fileType === ServerFile.prototype.fileTypeEnum.IMG) {
        reader.readAsDataURL(file);
      } else {
        reader.readAsText(file);
      }
      return reader.onload = function(evt) {
        var contents, serverFile;
        contents = evt.target.result;
        serverFile = new ServerFile({
          name: file.name,
          size: file.size,
          type: file.type,
          contents: contents
        });
        _this.collection.add(serverFile);
        return serverFile.save();
      };
    };

    ServerFileCollectionView.prototype.eventChangeLandingPage = function(event) {
      var cid, serverFile, target;
      if (!this.isEditable) {
        return;
      }
      this.collection.forEachDevelopmentFile(function(serverFile) {
        return serverFile.save("isLandingPage", false);
      });
      target = $(event.currentTarget);
      cid = target.val();
      serverFile = this.collection.get(cid);
      return serverFile.save("isLandingPage", true);
    };

    return ServerFileCollectionView;

  })(Backbone.View);

}).call(this);
