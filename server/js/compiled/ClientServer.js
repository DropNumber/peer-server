// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  window.ClientServer = (function() {

    function ClientServer(serverFileCollection, routeCollection, appView) {
      var _this = this;
      this.serverFileCollection = serverFileCollection;
      this.routeCollection = routeCollection;
      this.appView = appView;
      this.evalDynamic = function(js) {
        return ClientServer.prototype.evalDynamic.apply(_this, arguments);
      };
      this.getContentsForPath = function(path, paramData, foundRoute) {
        return ClientServer.prototype.getContentsForPath.apply(_this, arguments);
      };
      this.parsePath = function(fullPath) {
        return ClientServer.prototype.parsePath.apply(_this, arguments);
      };
      this.serveFile = function(data) {
        return ClientServer.prototype.serveFile.apply(_this, arguments);
      };
      this.sendEventTo = function(socketId, eventName, data) {
        return ClientServer.prototype.sendEventTo.apply(_this, arguments);
      };
      this.setUpReceiveEventCallbacks = function() {
        return ClientServer.prototype.setUpReceiveEventCallbacks.apply(_this, arguments);
      };
      this.channelConnectionOnData = function(data) {
        return ClientServer.prototype.channelConnectionOnData.apply(_this, arguments);
      };
      this.channelOnConnection = function(connection) {
        return ClientServer.prototype.channelOnConnection.apply(_this, arguments);
      };
      this.channelOnReady = function() {
        return ClientServer.prototype.channelOnReady.apply(_this, arguments);
      };
      this.eventTransmitter = new EventTransmitter();
      this.dataChannel = new ClientServerDataChannel(this.channelOnConnection, this.channelConnectionOnData, this.channelOnReady);
      this.setUpReceiveEventCallbacks();
      this.clientBrowserConnections = {};
    }

    ClientServer.prototype.channelOnReady = function() {
      return this.appView.trigger("setServerID", this.dataChannel.id);
    };

    ClientServer.prototype.channelOnConnection = function(connection) {
      var landingPage;
      landingPage = this.serverFileCollection.getLandingPage();
      this.clientBrowserConnections[connection.peer] = connection;
      return this.eventTransmitter.sendEvent(connection, "initialLoad", landingPage);
    };

    ClientServer.prototype.channelConnectionOnData = function(data) {
      return this.eventTransmitter.receiveEvent(data);
    };

    ClientServer.prototype.setUpReceiveEventCallbacks = function() {
      this.eventTransmitter.addEventCallback("requestFile", this.serveFile);
      return this.eventTransmitter.addEventCallback("requestAjax", this.serveAjax);
    };

    ClientServer.prototype.sendEventTo = function(socketId, eventName, data) {
      var connection;
      connection = this.clientBrowserConnections[socketId];
      return this.eventTransmitter.sendEvent(connection, eventName, data);
    };

    ClientServer.prototype.serveFile = function(data) {
      var fileType, foundRoute, page404, paramData, path, rawPath, slashedPath, _ref;
      console.log("FILENAME: " + data.filename);
      rawPath = data.filename || "";
      _ref = this.parsePath(rawPath), path = _ref[0], paramData = _ref[1];
      console.log("Parsed path: " + path);
      console.log("PARAMS: ");
      console.log(paramData);
      slashedPath = "/" + path;
      foundRoute = this.routeCollection.findRouteForPath(slashedPath);
      console.log("FOUND ROUTE: ");
      console.log(foundRoute);
      if (foundRoute === null && !this.serverFileCollection.hasProductionFile(path)) {
        page404 = this.serverFileCollection.get404Page();
        console.error("Error: Client requested " + rawPath + " which does not exist on server.");
        this.sendEventTo(data.socketId, "receiveFile", {
          filename: page404.filename,
          fileContents: page404.fileContents,
          fileType: page404.type,
          type: data.type
        });
        return;
      }
      fileType = foundRoute === null ? this.serverFileCollection.getFileType(path) : "DYNAMIC";
      return this.sendEventTo(data.socketId, "receiveFile", {
        filename: rawPath,
        fileContents: this.getContentsForPath(path, paramData, foundRoute),
        type: data.type,
        fileType: fileType
      });
    };

    ClientServer.prototype.parsePath = function(fullPath) {
      var params, pathDetails;
      if (!fullPath || fullPath === "") {
        return ["", {}];
      }
      pathDetails = URI.parse(fullPath);
      params = URI.parseQuery(pathDetails.query);
      console.log(params);
      return [pathDetails.path, params];
    };

    ClientServer.prototype.getContentsForPath = function(path, paramData, foundRoute) {
      var match, runRoute, slashedPath;
      if (foundRoute !== null) {
        slashedPath = "/" + path;
        console.log("getting contents for path! ");
        console.log(foundRoute.paramNames);
        match = slashedPath.match(foundRoute.pathRegex);
        console.log("Matching given path " + slashedPath);
        console.log("with found path " + foundRoute.get("routePath"));
        console.log("and results are: " + match);
        runRoute = foundRoute.getExecutableFunction(paramData, match.slice(1), this.serverFileCollection);
        return runRoute();
      }
      return this.serverFileCollection.getContents(path);
    };

    ClientServer.prototype.evalDynamic = function(js) {
      var exe,
        _this = this;
      console.log("evalDynamic");
      exe = function() {
        return eval(js);
      };
      return exe();
    };

    return ClientServer;

  })();

}).call(this);
