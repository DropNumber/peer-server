// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ClientServer = (function() {

    function ClientServer(serverFileCollection, appView) {
      this.serverFileCollection = serverFileCollection;
      this.appView = appView;
      this.serveFile = __bind(this.serveFile, this);

      this.sendEventTo = __bind(this.sendEventTo, this);

      this.setUpReceiveEventCallbacks = __bind(this.setUpReceiveEventCallbacks, this);

      this.channelOnMessage = __bind(this.channelOnMessage, this);

      this.channelOnOpen = __bind(this.channelOnOpen, this);

      this.channelOnReady = __bind(this.channelOnReady, this);

      this.eventTransmitter = new EventTransmitter();
      this.dataChannel = new ClientServerDataChannel(this.channelOnOpen, this.channelOnMessage, this.channelOnReady);
      this.setUpReceiveEventCallbacks();
    }

    ClientServer.prototype.channelOnReady = function() {
      return this.appView.trigger("setServerID", this.dataChannel.id);
    };

    ClientServer.prototype.channelOnOpen = function() {
      var landingPage;
      console.log("channelOnOpen");
      landingPage = this.serverFileCollection.getLandingPage();
      return this.eventTransmitter.sendEvent(this.dataChannel, "initialLoad", landingPage);
    };

    ClientServer.prototype.channelOnMessage = function(message) {
      console.log("channelOnMessage", message);
      return this.eventTransmitter.receiveEvent(message);
    };

    ClientServer.prototype.setUpReceiveEventCallbacks = function() {
      return this.eventTransmitter.addEventCallback("requestFile", this.serveFile);
    };

    ClientServer.prototype.sendEventTo = function(userID, eventName, data) {
      var channel;
      console.log(this.dataChannel.getChannelByUserID(userID));
      channel = this.dataChannel.getChannelByUserID(userID);
      return this.eventTransmitter.sendEvent(channel, eventName, data);
    };

    ClientServer.prototype.serveFile = function(data) {
      var filename;
      filename = data.filename;
      console.log("FILENAME: " + filename);
      if (!this.serverFileCollection.hasFile(filename)) {
        console.error("Error: Client requested " + filename + " which does not exist on server.");
        this.sendEventTo(data.socketId, "receiveFile", {
          filename: filename,
          fileContents: "",
          type: ""
        });
        return;
      }
      return this.sendEventTo(data.socketId, "receiveFile", {
        filename: filename,
        fileContents: this.serverFileCollection.getContents(filename),
        type: data.type
      });
    };

    return ClientServer;

  })();

}).call(this);
