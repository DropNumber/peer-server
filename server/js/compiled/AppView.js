// Generated by CoffeeScript 1.3.3
(function() {
  ' Handles all frontend setup for UI.';

  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {

    __extends(AppView, _super);

    function AppView() {
      var _this = this;
      this.doneEditing = function() {
        return AppView.prototype.doneEditing.apply(_this, arguments);
      };
      this.toggleIsEditable = function() {
        return AppView.prototype.toggleIsEditable.apply(_this, arguments);
      };
      this.setClientBrowserLink = function(link) {
        return AppView.prototype.setClientBrowserLink.apply(_this, arguments);
      };
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.el = "#client-server";

    AppView.prototype.initialize = function() {
      return this.serverFileCollectionView = new ServerFileCollectionView({
        collection: this.collection
      });
      this.editServerButton = this.$(".edit-server");
      return this.editServerDoneButton = this.$(".edit-server-done");
    };

    AppView.prototype.events = {
      "click .edit-server": "toggleIsEditable",
      "click .edit-server-done": "doneEditing"
    };

    AppView.prototype.setClientBrowserLink = function(link) {
      var clientBrowserLink;
      clientBrowserLink = $(".browser-link");
      clientBrowserLink.attr('href', link);
      return clientBrowserLink.html(link);
    };

    AppView.prototype.toggleIsEditable = function() {
      this.editServerButton.toggle();
      this.editServerDoneButton.toggle();
      return this.serverFileCollectionView.toggleIsEditable();
    };

    AppView.prototype.doneEditing = function() {
      this.collection.createProductionVersion();
      return this.toggleIsEditable();
    };

    return AppView;

  })(Backbone.View);

}).call(this);
