// Generated by CoffeeScript 1.6.2
(function() {
  window.WebRTC = (function() {
    function WebRTC() {
      var _this = this;

      this.connection = io.connect("http://localhost:8890");
      this.connection.emit('joinAsClient');
      this.peerConnection = new RTCPeerConnection(null, {
        "optional": [
          {
            "RtpDataChannels": true
          }
        ]
      });
      this.peerConnection.onicecandidate = function(event) {
        if (event.candidate) {
          return _this.connection.emit("sendICECandidate", event.candidate);
        }
      };
      this.connection.on("receiveICECandidate", function(candidate) {
        console.log("receive ICE");
        return _this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
      });
      this.connection.on("setClientID", function(clientID) {
        _this.clientID = clientID;
        _this.createDataChannel();
        return _this.sendOffer();
      });
    }

    WebRTC.prototype.sendOffer = function() {
      var _this = this;

      return this.peerConnection.createOffer(function(sessionDescription) {
        _this.peerConnection.setLocalDescription(sessionDescription);
        return _this.connection.emit("sendOffer", _this.clientID, sessionDescription);
      });
    };

    WebRTC.prototype.createDataChannel = function() {
      var error,
        _this = this;

      try {
        console.log("createDataChannel " + this.clientID);
        this.dataChannel = this.peerConnection.createDataChannel(this.clientID, {
          reliable: false
        });
        this.dataChannel.onopen = function() {
          return console.log("data stream open " + _this.clientID);
        };
        this.dataChannel.onclose = function(event) {
          delete _this.dataChannels[clientID];
          return console.log("data stream close " + _this.clientID);
        };
        this.dataChannel.onmessage = function(message) {
          console.log("data stream message " + _this.clientID);
          return console.log(message);
        };
        return this.dataChannel.onerror = function(err) {
          return console.log("data stream error " + _this.clientID + ": " + err);
        };
      } catch (_error) {
        error = _error;
        console.log("seems that DataChannel is NOT actually supported!");
        throw error;
      }
    };

    return WebRTC;

  })();

}).call(this);
