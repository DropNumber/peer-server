// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.DropHandler = (function() {
    function DropHandler(fileStore, file_name_list, codeEditor) {
      this.fileStore = fileStore;
      this.file_name_list = file_name_list;
      this.codeEditor = codeEditor;
      this.handleFile = __bind(this.handleFile, this);
      this.handleDrop = __bind(this.handleDrop, this);
      this.updateListView = __bind(this.updateListView, this);
    }

    DropHandler.prototype.updateListView = function(file_name) {
      var idx, name, _ref;

      this.file_name_list.empty();
      _ref = this.fileStore.fileNames();
      for (idx in _ref) {
        name = _ref[idx];
        this.file_name_list.append('<option value="' + name + '">' + name + '</option>');
      }
      this.file_name_list.val(file_name);
      return this.codeEditor.setCodeContents(window.fileStore.getFileContents(file_name));
    };

    DropHandler.prototype.handleDrop = function(event) {
      var droppedFiles, file, _i, _len, _results;

      droppedFiles = event.originalEvent.dataTransfer.files;
      console.log("processing dropped files:" + droppedFiles);
      _results = [];
      for (_i = 0, _len = droppedFiles.length; _i < _len; _i++) {
        file = droppedFiles[_i];
        _results.push(this.handleFile(file));
      }
      return _results;
    };

    DropHandler.prototype.handleFile = function(file) {
      var reader,
        _this = this;

      console.log("uploading" + file.name);
      reader = new FileReader();
      if (file.type === "image/jpeg") {
        reader.readAsDataURL(file);
      } else {
        reader.readAsText(file);
      }
      return reader.onload = function(evt) {
        var text;

        text = evt.target.result;
        _this.fileStore.addFile(file.name, file.size, file.type, text);
        console.log("added new file named " + file.name);
        return _this.updateListView(file.name);
      };
    };

    return DropHandler;

  })();

}).call(this);
