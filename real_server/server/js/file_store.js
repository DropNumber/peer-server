// Generated by CoffeeScript 1.6.2
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.FileStore = (function() {
    function FileStore() {
      this.fileNames = __bind(this.fileNames, this);
      this.hasFile = __bind(this.hasFile, this);
      this.getFileEntry = __bind(this.getFileEntry, this);
      this.getFileType = __bind(this.getFileType, this);
      this.getFileSize = __bind(this.getFileSize, this);
      this.getFileContents = __bind(this.getFileContents, this);
      this.registerForEvent = __bind(this.registerForEvent, this);
      this.trigger = __bind(this.trigger, this);
      this.addFile = __bind(this.addFile, this);      console.log("FileStore initializing");
      this.fileList = {};
      this.triggerFor = {};
    }

    FileStore.prototype.addFile = function(name, size, type, contents) {
      this.fileList[name] = {
        "name": name,
        "size": size,
        "type": type,
        "contents": contents
      };
      return this.trigger("fileStore:fileAdded", {
        "name": name
      });
    };

    FileStore.prototype.trigger = function(eventName, data) {
      var callback, _i, _len, _ref, _results;

      _ref = this.triggerFor[eventName];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        _results.push(callback(data));
      }
      return _results;
    };

    FileStore.prototype.registerForEvent = function(eventName, callback) {
      if (!this.triggerFor[eventName]) {
        this.triggerFor[eventName] = [];
      }
      return this.triggerFor[eventName].push(callback);
    };

    FileStore.prototype.getFileContents = function(name) {
      console.log(this.fileList);
      console.log(name);
      return this.fileList[name].contents;
    };

    FileStore.prototype.getFileSize = function(name) {
      return this.fileList[name].size;
    };

    FileStore.prototype.getFileType = function(type) {
      return this.fileList[name].type;
    };

    FileStore.prototype.getFileEntry = function(name) {
      return this.fileList[name];
    };

    FileStore.prototype.hasFile = function(name) {
      return name in this.fileList;
    };

    FileStore.prototype.fileNames = function() {
      return Object.keys(this.fileList);
    };

    return FileStore;

  })();

}).call(this);
