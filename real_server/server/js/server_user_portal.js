// Generated by CoffeeScript 1.6.2
(function() {
  " Top-level organizing class for user control over server (ie, setting initial page, UI, etc) \n\nRight now is just some quick-and-dirty code to get some cool functionality. \nWe should think through UI before it gets too messy. ";
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ServerUserPortal = (function() {
    function ServerUserPortal(portalElem, fileStore) {
      this.portalElem = portalElem;
      this.fileStore = fileStore;
      this.selectorContainsOption = __bind(this.selectorContainsOption, this);
      this.getLandingPage = __bind(this.getLandingPage, this);
      this.fileAddedCallback = __bind(this.fileAddedCallback, this);
      this.fileStore.registerForEvent("fileStore:fileAdded", this.fileAddedCallback);
      this.startSelector = $('<select id="start-selector"><option value="default">(default)</option></select>');
      this.portalElem.append("Set the landing page: ");
      this.portalElem.append(this.startSelector);
    }

    ServerUserPortal.prototype.fileAddedCallback = function(data) {
      var filename;

      filename = data.name;
      if (filename.slice(-5) === ".html" && !this.selectorContainsOption(this.startSelector, filename)) {
        return this.startSelector.append('<option value="' + filename + '">' + filename + '</option>');
      }
    };

    ServerUserPortal.prototype.getLandingPage = function() {
      var landing;

      landing = this.startSelector.find(":selected").val();
      console.log("landing page:" + landing);
      if (landing === "default") {
        return "<h2>Welcome page</h2><p>Good job.</p>";
      }
      return this.fileStore.getFileContents(landing);
    };

    ServerUserPortal.prototype.selectorContainsOption = function(selector, option) {
      return selector.find("option[value='" + option + "']").length > 0;
    };

    return ServerUserPortal;

  })();

}).call(this);
