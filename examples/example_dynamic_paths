
== More advance sample todo app ==
Makes a todo with text inputs
Path: /maketodo
Function: 
  var today = new Date();
  var date = (today.getMonth()+1) + "/" + today.getDate() + "/" + today.getFullYear(); 
  var hours = today.getHours();
  var ampm = hours < 12 ? "am" : "pm";
  var time = hours + ":" + today.getMinutes() + ampm;
  database.insert({"type": "bettertodo", "name": params.name, "desc": params.desc, "date": date, "time": time});
  return "okay"

Shows the list of all the bettertodos.
Path: showtodos
Function:
  html = "<h1>Here are your better todos!: </h1><ul>"
  todos = database({"type":"bettertodo"}).each(function(todo) {
      html += "<h3>name: " + todo.name + "</h3>" + "<h4>description: " + todo.desc + "</h4>"
      html += "<h6>Created: " + todo.date + " at " + todo.time + "</h6>";

  })
  html += "</ul>"
  return html

maketodo.html
  <html>
      <head>
          <script src="jquery.js"></script>
          <title>Make a todo list</title>
          <script src="todomake.js"></script>
      </head>
      <body>
          <input class="name" placeholder="Name your task" />
          <br />
          <input class="description" placeholder = "Describe your task" />
        
          <button onClick="makeTodo()">Make</button>
          
          <h2 class="result"></h2>
          </body>
  </html>

todomake.js
  
  function makeTodo() {
      onsuccess = function(res) {
          $(".result").html("it worked");
      };
      onerror = function(ignore, error, errorThrown) {
          $(".result").html("it broke: " + errorThrown);
      };
      var name = $(".name").val();
      var desc = $(".description").val();
      $.ajax("maketodo", {success: onsuccess, error: onerror, data: {"name": name, "desc": desc}});
      return "success"
  }

== SAMPLE TODO app ==
Creates a todo via a url and stores it in a database (yes, it's silly to make a todo from a url.)
Path: todo/make/<text>
Function:
  var today = new Date();
  var date = (today.getMonth()+1) + "/" + today.getDate() + "/" + today.getFullYear(); 
  var hours = today.getHours();
  var ampm = hours < 12 ? "am" : "pm";
  var time = hours + ":" + today.getMinutes() + ampm;
  console.log(database);
  database.insert({"type": "todo", "date": date, "time": time, "message": text});
  return "<h1>TODO created: </h1><h2>" + text + "</h2> <h4>at " + time + "</h4>";

Lists all of the todos made with the todo/make/<text> path from above
Path: todo/list
Function:
  html = "<h1>Here are your todos!: </h1><ul>"
  todos = database({"type":"todo"}).each(function(todo) {
      html += "<h6>Created: " + todo.date + " at " + todo.time + "</h6>";
      html += "<h3>" + todo.message + "</h3>" 
  })

  html += "</ul>"
  return html


=== Get an int from the path === 
Shows how to get an int from the path by converting a date in milliseconds into a calendar date
Path: whenis/<ms>
Function: 
  var d = new Date(parseInt(ms));
  return "<h2>" + (d.getMonth()+1) + "/" + d.getDate() + "/"  + d.getFullYear() + "</h2>"

=== Access URL GET parameters with params=== 
Uses URL GET parameters as well as URL path parameters. 
Path: <animal>/goes/<sound>
Function: 
  var str = "";
  if(params.name)
      str += "<h1> Hello " + params.name + "</h1>"
  str += "<h1>" + animal + " goes " + sound
  return str

=== Return a static file === 
Shows how to use the static_file functionality. 
Path: static/html/<name>
Function: 
  return static_file(name + ".html")  // Provided name exists.

=== Return a template with parameters === 
Shows how to use the render_template functionality. 
Path: /template
Function:
  return render_template("t_test.html", {"heading": "Welcome to my template", "body": "with some body text."});
t_test.html file: 
  <html>
    <head><title>Hello</title></head>
    <body>
    <h2>Here is a heading: {{ heading }}</h2>
    <p>With a body: {{ body }} </p>
    </body>
</html>
